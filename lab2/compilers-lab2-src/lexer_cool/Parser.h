#ifndef PARSER_H
#define PARSER_H

/* Token types */
enum TokenType {
    TOKEN_KW_CASE = 1,
    TOKEN_KW_FI,
    TOKEN_KW_ELSE,
    TOKEN_KW_IF,
    TOKEN_KW_NOT,
    TOKEN_KW_OF,
    TOKEN_KW_CLASS,
    TOKEN_KW_FALSE,
    TOKEN_KW_IN,
    TOKEN_KW_INHERITS,
    TOKEN_KW_ISVOID,
    TOKEN_KW_LET,
    TOKEN_KW_LOOP,
    TOKEN_KW_POOL,
    TOKEN_KW_ESAC,
    TOKEN_KW_NEW,
    TOKEN_KW_TRUE,
    TOKEN_KW_THEN,
    TOKEN_KW_WHILE,
    
    TOKEN_LOGICAL_OPERATOR_AND,
    TOKEN_LOGICAL_OPERATOR_OR,

    TOKEN_COMPARISON_OPERATOR_LEQ,
    TOKEN_COMPARISON_OPERATOR_GEQ,
    TOKEN_COMPARISON_OPERATOR_NEQ,
    TOKEN_COMPARISON_OPERATOR_EQ,
    TOKEN_COMPARISON_OPERATOR_ASSIGN,
    TOKEN_COMPARISON_OPERATOR_LESS_THEN,
    TOKEN_COMPARISON_OPERATOR_MORE_THEN,

    TOKEN_ASSIGMENT_OPERATOR_ASSIGN,

    TOKEN_UNSIGNED_INTEGER,
    
    TOKEN_STRING,
    TOKEN_IDENTIFIER_TYPE,
    TOKEN_IDENTIFIER_OBJ,
    TOKEN_IDENTIFIER_SELF,
    TOKEN_IDENTIFIER_SELFTYPE,

    TOKEN_UNION_OPERATOR_LBRACE,
    TOKEN_UNION_OPERATOR_RBRACE,
    TOKEN_UNION_OPERATOR_LPAREN,
    TOKEN_UNION_OPERATOR_RPAREN,
    TOKEN_EOC_SEMICOLON,
    TOKEN_COMMA,
    

    TOKEN_ARITHMETIC_OPERATOR_PLUS,
    TOKEN_ARITHMETIC_OPERATOR_MINUS,
    TOKEN_ARITHMETIC_OPERATOR_MULT,
    TOKEN_ARITHMETIC_OPERATOR_DIV
};

#endif
